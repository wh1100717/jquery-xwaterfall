// Generated by CoffeeScript 1.7.1

/*
 * jquery-xwaterfall
 *
 *
 * Copyright (c) 2014 wh1100717, somonus
 * Licensed under the MIT license.
 */
(function($) {
  var WaterFall;
  $.fn.waterfall = function(options) {
    var wf;
    options = $.extend({}, $.waterfall.options, options);
    wf = new WaterFall(this, options);
    return wf.init();
  };
  $.waterfall = function(options) {
    return options = $.extend({}, $.waterfall.options, options);
  };
  $.waterfall.options = {
    width: 335
  };
  WaterFall = (function() {
    function WaterFall(container, options) {
      this.container = container;
      this.options = options;
    }

    WaterFall.prototype.init = function() {
      var i, self;
      this.page = 1;
      this.unloadNum = 0;
      this.loading = false;
      this.colNum = Math.floor(this.container.width() / this.options.width);
      this.colWidths = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.colNum; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(i * this.options.width);
        }
        return _results;
      }).call(this);
      this.colHeights = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.colNum; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      }).call(this);
      self = this;
      $(window).bind("scroll", function() {
        return self.loadData(self);
      });
      return $(window).resize(function() {
        return self.resize(self);
      });
    };

    WaterFall.prototype.loadData = function(self) {
      var absTop, win, winTop;
      if (self.unloadNum > 0) {
        return;
      }
      if (self.loading) {
        return;
      }
      win = $(window);
      winTop = win.scrollTop() + win.height();
      absTop = self.container.offset().top + self.container.height();
      if (winTop < absTop - 2 * win.height()) {
        return;
      }
      self.loading = true;
      $.getJSON(self.options.url, {
        page: self.page
      }, function(data) {
        if (data == null) {
          return;
        }
        self.generate(data);
        self.unloadNum += data.length;
        self.page += 1;
        return self.loading = false;
      });
      return this;
    };

    WaterFall.prototype.resize = function(self) {
      var i, newcolNum, wrappers;
      newcolNum = Math.floor(this.container.width() / this.options.width);
      console.log(newcolNum);
      console.log(this.colNum);
      if (newcolNum === this.colNum) {
        return;
      }
      this.colNum = newcolNum;
      this.colWidths = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.colNum; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(i * this.options.width);
        }
        return _results;
      }).call(this);
      this.colHeights = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.colNum; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      }).call(this);
      wrappers = $("#waterfall li");
      return wrappers.each(function() {
        return self.insert($(this));
      });
    };

    WaterFall.prototype.generate = function(data) {
      var d, self, tpl, wrappers, _i, _len;
      self = this;
      tpl = "";
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        tpl += "<li style=\"left: " + (this.random(6000)) + "px; top: " + (this.random(6000)) + "px;\">\n    <a href=\"javascript:void(0)\">\n        <img src=\"" + d.isrc + "\" width=\"" + this.options.width + "\">\n    </a>\n</li>";
      }
      wrappers = $(tpl);
      this.container.append(wrappers);
      return wrappers.find("img").each(function() {
        return $(this).load(function() {
          var node;
          node = $(this).parents("li");
          return self.insert(node);
        });
      });
    };

    WaterFall.prototype.insert = function(node) {
      var i, index, minHeigth, minIndex, _i, _len, _ref;
      minHeigth = Math.min.apply({}, this.colHeights);
      _ref = this.colHeights;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        i = _ref[index];
        if (!(i === minHeigth)) {
          continue;
        }
        minIndex = index;
        break;
      }
      this.colHeights[minIndex] += node.height();
      node.animate({
        top: minHeigth,
        left: this.colWidths[minIndex]
      });
      this.container.css("height", Math.max.apply({}, this.colHeights));
      return this.unloadNum -= 1;
    };

    WaterFall.prototype.random = function(number) {
      return Math.floor(Math.random() * number);
    };

    return WaterFall;

  })();
})(jQuery);
